
### Hyperparameters
NEURONS: 10
INDIVIDUALS: 5
GENERATIONS: 12
NUMBER_PROCESSES: 10
SIM_TIME: 25            # max 40 secs

# Dataset loading and saving options
ANTI_OVERFITTING:         True
DIFFERENT_DATASET_EVERY_GENERATION: 1
SAVE_TEST_SOLUTION_STEPSIZE: 25  #every .. steps the solution to the test case is calculated and saved
DATASET_DIR: "Sim_data/height_control_PID/sine_derivative"

LAYER_SETTING:
  l1:
     recurrent:              False
     clamp_v:                True  # BaseLIF  
     shared_leak_i:          True
     bias:                   True  # BaseLinear(Rec)Layers
     shared_weight_and_bias: True

  l2:
     bias:                   False           # always set to fals
     shared_weight_and_bias: True

TARGET_FITNESS: 1   
#1) "pid output"        : NO dynamic system simulated     Fitness: MSE + Pearson
#2) "system reference"  : Dynamic system simulated        Fitness: MSE
#3) "pid system output" : Dynamic system simulated        Fitness: MSE + Pearson

# //TODO ONLY USE THESE WHEN DIFFERENT STRUCTURE OF DATASET IS USE
ALTERNATIVE_LABEL_INPUT: [0]
ALTERNATIVE_LABEL_TARGET: [1]

###################################
###################################
### Dynamics settings Blimp
DZ_INITIAL: 0
Z_INITIAL: 0
TIME_STEP: 0.01


### Less frequenty changed parameters
DATASET_NUMBER: null
START_DATASETS_IN_MIDDLE: False

TEST_DATA_FILE: "test_dataset"
ALGORITHM: "pycma" #cmaes or pycma
WANDB_LOG:          True
SAVE_LAST_SOLUTION: True
SHOW_PLOTS:         False




#####################################################################################################################################
#########################################   Initial conditions   #####################################################################

# There are two optinons: either manually (with prev solution or hardcoded) setting the parameters or using a mean value and a gaussian 
# distribution. If it is not set manually, then it it automatically set via mean and gaussian

######## MEAN
#Options: 
# 1) "previous":  Previous solution
# 2) "same for all": All paramaters all initialized using th same method
# 3) "custom":  Every parameters can be initialized using a different method

MEAN_SETTING: "same for all" # "previous", "same for all" or "custom"  


################################################################################################
PREVIOUS_SOLUTION: 38-smart-blaze  # Null or the name of the prev saved soltion (without .pkl)
SAME_FOR_ALL: "range"      # Either Null or "manual"/"gaussian"/"range"
CUSTOM:
  l1.neuron.leak_i: "manual"
  l1.neuron.leak_v: "gaussian"
  l1.neuron.thresh: "range"
  l1.rec.weight:    "range"
  l1.ff.weight:     "range"
  l1.ff.bias:       "range"

  l2.neuron.leak:   "range"
  l2.ff.weight:     "range"


### Manual
manual:
  l1.ff.weight: [1.2, 1.2, 1.2, 1.2, 1,1,1,1, -1.2,-1.2,-1.2,-1.2, -1, -1, -1, -1]
  l2.ff.weight: [0.25,0.25,0.25,0.25, -0.25,-0.25,-0.25,-0.25, 0.25,0.25,0.25,0.25, -0.25,-0.25,-0.25,-0.25]
  l1.neuron.leak_i: [0.01,0.01,0.01,0.01, 0.2,0.1,0.2,0.1, 0.01,0.01,0.01,0.01, 0.2,0.1,0.2,0.1,]

### Gaussian and range
INIT_LEAKI_HALF_ZERO: False                # Set the leak_i of the first 5 neurons to close to zero
INIT_W2_Q2_Q4_NEG:    True
INIT_W1_H2_NEG:       True

gaussian:
  l1.neuron.leak_i: 0.9
  l1.neuron.leak_v: 0.9
  l1.neuron.thresh: 1
  l1.rec.weight: 0.001
  l1.ff.weight: 1
  l1.ff.bias: 0.5
  l2.neuron.leak: 0.9
  l2.ff.weight: 0.20 

range: #keep all positive
  l1.neuron.leak_i: [0.1   , 0.9]
  l1.neuron.leak_v: [0.1   , 0.9]
  l1.neuron.thresh: [0.8   , 1.2]
  l1.rec.weight:    [0.001 , 0.002]
  l1.ff.weight:     [1     , 1.5]
  l1.ff.bias:       [0.2   , 0.8]
  l2.neuron.leak:   [0.899   , 0.901]
  l2.ff.weight:     [0.15  , 0.25] 

######## STD
PERCENT_INTIIAL_STEPSIZE: 0.005



#####################################################################################################################################
#########################################   Bounds   #####################################################################

BOUND_LEAKI_HALF_ZERO: False  #Second half of neurons leak is zero
BOUND_W2_Q2_Q4_NEG: True    #Q1,Q3 postive and Q2,Q4 negative
BOUNDS_W1_H2_NEG: True      #Second half of neurons w1 is zero

PARAMETER_BOUNDS: #null if None in python
  l1.neuron.leak_i: {"low": 0,"high": 0.99}
  l1.neuron.leak_v: {"low": 0,"high": 1}
  l1.neuron.thresh: {"low": 0.8,"high": 10}
  l1.rec.weight: {"low": -0.2,"high": 0.2}
  l1.ff.weight: {"low": -1.5,"high": 1.5}  #also negative!
  l1.ff.bias: {"low": -1,"high": 1}  #also negative!

  l2.neuron.leak: {"low": 0.88,"high": 0.92}
  l2.ff.weight:   {"low": -0.25,"high": 0.25} #also negative!


